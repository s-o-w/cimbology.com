// Partially Generated by Copilot
document.addEventListener('DOMContentLoaded', function() {
    // Set current year for copyright
    document.getElementById('year').textContent = new Date().getFullYear();

    // Initialize EmailJS
    // NOTE: Replace 'YOUR_PUBLIC_KEY' with your actual EmailJS public key
    emailjs.init('3f98hn0AzkGmuFP8a');

    // Handle contact form submission
    const contactForm = document.getElementById('contact-form');
    const statusMessage = document.getElementById('status-message');
    
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get form data
            const formData = {
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                message: document.getElementById('message').value
            };
            
            // Show loading message
            statusMessage.textContent = 'Sending message...';
            statusMessage.className = 'status-message';
            statusMessage.style.display = 'block';
            
            // Send email via EmailJS
            // NOTE: Replace 'YOUR_SERVICE_ID' and 'YOUR_TEMPLATE_ID' with your actual EmailJS service and template IDs
            emailjs.send('cimbology-contact', 'template_ve5e93n', formData)
                .then(function(response) {
                    // Success message
                    statusMessage.textContent = 'Message sent successfully! We\'ll get back to you soon.';
                    statusMessage.className = 'status-message success';
                    
                    // Reset form
                    contactForm.reset();
                    
                    // Hide message after 5 seconds
                    setTimeout(function() {
                        statusMessage.style.display = 'none';
                    }, 5000);
                })
                .catch(function(error) {
                    // Error message
                    statusMessage.textContent = 'There was an error sending your message. Please try again later.';
                    statusMessage.className = 'status-message error';
                    
                    console.error('EmailJS error:', error);
                });
        });
    }

    // Header scroll effect
    const header = document.querySelector('header');
    window.addEventListener('scroll', function() {
        if (window.scrollY > 50) {
            header.style.padding = '1rem 5%';
            header.style.boxShadow = '0 2px 15px rgba(0, 0, 0, 0.1)';
        } else {
            header.style.padding = '2rem 5%';
            header.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
        }
    });

    // Scroll animation for story sections
    const storySections = document.querySelectorAll('.story-section');
    
    // Initial check for elements in viewport on page load
    checkVisibility();
    
    // Check visibility on scroll
    window.addEventListener('scroll', function() {
        checkVisibility();
    });
    
    function checkVisibility() {
        storySections.forEach(section => {
            const sectionTop = section.getBoundingClientRect().top;
            const windowHeight = window.innerHeight;
            
            // Element is considered visible when it's 25% in the viewport
            if (sectionTop < windowHeight * 0.75) {
                section.classList.add('visible');
            }
        });
    }
    
    // Typewriter effect for the intro paragraph
    const introParagraph = document.querySelector('#intro p');
    const introText = introParagraph.textContent;
    introParagraph.textContent = '';
    
    let charIndex = 0;
    const typingSpeed = 30; // milliseconds
    
    function typeWriter() {
        if (charIndex < introText.length) {
            introParagraph.textContent += introText.charAt(charIndex);
            charIndex++;
            setTimeout(typeWriter, typingSpeed);
        }
    }
    
    // Start typewriter effect when intro section is visible
    const introObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                setTimeout(typeWriter, 500); // Small delay before starting
                introObserver.disconnect(); // Only trigger once
            }
        });
    }, { threshold: 0.5 });
    
    introObserver.observe(document.getElementById('intro'));

    // Smooth scrolling for any internal links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                window.scrollTo({
                    top: targetElement.offsetTop - 140, // Increased offset for fixed header to prevent content from being hidden
                    behavior: 'smooth'
                });
            }
        });
    });
    
    // Specific handling for the scroll down arrow with additional visual effect
    document.querySelector('.scroll-down-arrow').addEventListener('click', function(e) {
        e.preventDefault();
        
        // Create a flash effect
        const flashOverlay = document.createElement('div');
        flashOverlay.style.position = 'fixed';
        flashOverlay.style.top = '0';
        flashOverlay.style.left = '0';
        flashOverlay.style.width = '100%';
        flashOverlay.style.height = '100%';
        flashOverlay.style.backgroundColor = 'rgba(226, 92, 4, 0.2)';
        flashOverlay.style.zIndex = '9999';
        flashOverlay.style.opacity = '0';
        flashOverlay.style.transition = 'opacity 0.3s ease-in-out';
        
        document.body.appendChild(flashOverlay);
        
        // Show and hide the flash
        setTimeout(() => { flashOverlay.style.opacity = '1'; }, 10);
        setTimeout(() => { 
            flashOverlay.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(flashOverlay);
            }, 300);
        }, 300);
        
        // Scroll to target
        const targetElement = document.querySelector('#intro');
        if (targetElement) {
            window.scrollTo({
                top: targetElement.offsetTop - 140, // Increased offset to prevent header from hiding content
                behavior: 'smooth'
            });
        }
    });
    
    // Terminal section typing effect
    const terminalObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // The terminal is now visible
                // Get all command lines and responses
                const commandLines = document.querySelectorAll('.terminal .command-line');
                const responses = document.querySelectorAll('.terminal .response');
                
                // Create pairs of commands and responses
                const commandResponsePairs = [];
                
                // Group command lines and responses into pairs
                for (let i = 0; i < commandLines.length - 1; i++) { // Exclude the last command line (it has no response)
                    commandResponsePairs.push([commandLines[i], responses[i]]);
                }
                
                // Add the last command line without a response
                if (commandLines.length > responses.length) {
                    commandResponsePairs.push([commandLines[commandLines.length - 1]]);
                }
                
                // Add the last pair if it exists
                if (currentPair.length > 0) {
                    commandResponsePairs.push(currentPair);
                }
                
                // Hide all command-response pairs except the first command
                commandResponsePairs.forEach((pair, index) => {
                    if (index === 0) {
                        // Show first command
                        pair[0].style.opacity = '1';
                    } else {
                        // Hide all other commands
                        pair[0].style.opacity = '0';
                    }
                    
                    // Hide all responses initially
                    if (pair[1]) {
                        pair[1].style.opacity = '0';
                    }
                });
                
                // Animate the terminal with a sequential reveal
                let pairIndex = 0;
                
                const revealInterval = setInterval(() => {
                    // Show response for current command
                    if (pairIndex < commandResponsePairs.length && commandResponsePairs[pairIndex][1]) {
                        commandResponsePairs[pairIndex][1].style.opacity = '1';
                        
                        // Move to next command after a delay
                        setTimeout(() => {
                            pairIndex++;
                            if (pairIndex >= commandResponsePairs.length) {
                                clearInterval(revealInterval);
                                return;
                            }
                            
                            // Show next command
                            commandResponsePairs[pairIndex][0].style.opacity = '1';
                        }, 1000); // Delay before next command
                    } else {
                        pairIndex++;
                        if (pairIndex >= commandResponsePairs.length) {
                            clearInterval(revealInterval);
                            return;
                        }
                    }
                }, 2000); // Overall timing between steps
                
                terminalObserver.disconnect(); // Only trigger once
            }
        });
    }, { threshold: 0.5 });
    
    if (document.querySelector('.terminal')) {
        terminalObserver.observe(document.querySelector('.terminal'));
    }
});
